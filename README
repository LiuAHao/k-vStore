1.0版
# C++ KV存储系统设计

## 项目文件结构

```
kv_store/
├── include/
│   ├── kv_store.h          // 主头文件
│   ├── slab_allocator.h    // Slab分配器
│   ├── lru_cache.h         // LRU缓存实现
│   └── ttl_manager.h       // TTL管理器
├── src/
│   ├── kv_store.cpp        // 主实现
│   ├── slab_allocator.cpp
│   ├── lru_cache.cpp
│   └── ttl_manager.cpp
└── test/
    └── test_kv_store.cpp   // 测试代码
```

## 核心类设计

### 1. Slab分配器 (slab_allocator.h)

```cpp
#pragma once
#include <cstddef>
#include <vector>
#include <list>
#include <unordered_map>

class SlabAllocator {
public:
    // 初始化Slab系统，指定最大内存和增长因子
    explicit SlabAllocator(size_t max_memory, float growth_factor = 1.25);
    ~SlabAllocator();
    
    // 分配指定大小的内存
    void* allocate(size_t size);
    
    // 释放内存
    void deallocate(void* ptr);
    
    // 获取内存使用统计
    size_t get_used_memory() const;
    size_t get_free_memory() const;

private:
    struct SlabClass {
        size_t item_size;              // 该类管理的对象大小
        size_t items_per_slab;         // 每个slab页能存放的对象数
        std::list<void*> free_list;    // 空闲对象列表
        // 可以添加更多统计信息
    };
    
    // 根据请求大小找到合适的Slab类
    size_t find_slab_class(size_t size) const;
    
    // 分配一个新的Slab页
    void* allocate_new_slab(size_t class_idx);
    
    std::vector<SlabClass> slab_classes_;  // 所有Slab类
    std::unordered_map<void*, size_t> ptr_to_class_; // 指针到Slab类的映射
    
    size_t max_memory_;
    size_t used_memory_;
    const float growth_factor_;
};
```

### 2. TTL管理器 (ttl_manager.h)

```cpp
#pragma once
#include <chrono>
#include <unordered_map>
#include <string>
#include <mutex>

class TTLManager {
public:
    using TimePoint = std::chrono::system_clock::time_point;
    
    // 设置键的TTL
    void set_ttl(const std::string& key, TimePoint expire_time);
    
    // 获取键的剩余生存时间(毫秒)
    long long get_ttl(const std::string& key) const;
    
    // 检查键是否过期
    bool is_expired(const std::string& key) const;
    
    // 删除键的TTL记录
    void remove_ttl(const std::string& key);
    
    // 清理所有过期键
    void cleanup_expired();
    
private:
    mutable std::mutex mutex_;
    std::unordered_map<std::string, TimePoint> ttl_map_;
};
```

### 3. LRU缓存 (lru_cache.h)

```cpp
#pragma once
#include <list>
#include <unordered_map>
#include <string>
#include <mutex>

template<typename K, typename V>
class LRUCache {
public:
    explicit LRUCache(size_t capacity) : capacity_(capacity) {}
    
    // 获取键值，如果存在则提升到最近使用
    bool get(const K& key, V& value);
    
    // 添加键值，如果已存在则更新
    void put(const K& key, const V& value);
    
    // 删除键值
    void erase(const K& key);
    
    // 获取缓存大小
    size_t size() const;
    
private:
    using ListType = std::list<std::pair<K, V>>;
    using ListIter = typename ListType::iterator;
    
    size_t capacity_;
    ListType items_;  // 按访问顺序存储，前端是最新访问的
    std::unordered_map<K, ListIter> lookup_;  // 快速查找
    
    mutable std::mutex mutex_;
};
```

### 4. KV存储主类 (kv_store.h)

```cpp
#pragma once
#include <string>
#include <memory>
#include "slab_allocator.h"
#include "ttl_manager.h"
#include "lru_cache.h"

class KVStore {
public:
    struct Value {
        void* data;
        size_t size;
    };
    
    // 初始化KV存储，指定最大内存和LRU容量
    KVStore(size_t max_memory, size_t lru_capacity);
    ~KVStore();
    
    // 存储键值对，可选TTL(毫秒)
    bool set(const std::string& key, const void* value, size_t size, long long ttl_ms = 0);
    
    // 获取键值对
    bool get(const std::string& key, Value& value);
    
    // 删除键值对
    bool del(const std::string& key);
    
    // 清理过期键
    void cleanup();
    
    // 获取内存使用统计
    size_t get_used_memory() const;
    size_t get_free_memory() const;
    
private:
    std::unique_ptr<SlabAllocator> allocator_;
    std::unique_ptr<TTLManager> ttl_manager_;
    std::unique_ptr<LRUCache<std::string, Value>> lru_cache_;
    
    // 实际存储(简化版，实际可能需要更复杂的结构)
    std::unordered_map<std::string, Value> storage_;
    mutable std::mutex storage_mutex_;
    
    // 从存储中移除键值对(不通知LRU)
    void remove_from_storage(const std::string& key);
};
```

## 实现要点

### Slab分配器实现关键点

```cpp
// slab_allocator.cpp
void* SlabAllocator::allocate(size_t size) {
    if (size == 0 || size > max_memory_) return nullptr;
    
    size_t class_idx = find_slab_class(size);
    SlabClass& sc = slab_classes_[class_idx];
    
    std::lock_guard<std::mutex> lock(mutex_);
    
    if (sc.free_list.empty()) {
        void* new_slab = allocate_new_slab(class_idx);
        if (!new_slab) return nullptr;
    }
    
    void* ptr = sc.free_list.front();
    sc.free_list.pop_front();
    ptr_to_class_[ptr] = class_idx;
    used_memory_ += sc.item_size;
    
    return ptr;
}
```

### TTL管理器实现关键点

```cpp
// ttl_manager.cpp
bool TTLManager::is_expired(const std::string& key) const {
    std::lock_guard<std::mutex> lock(mutex_);
    
    auto it = ttl_map_.find(key);
    if (it == ttl_map_.end()) return false;
    
    return std::chrono::system_clock::now() >= it->second;
}
```

### LRU缓存实现关键点

```cpp
// lru_cache.cpp (模板实现通常放在头文件中)
template<typename K, typename V>
bool LRUCache<K, V>::get(const K& key, V& value) {
    std::lock_guard<std::mutex> lock(mutex_);
    
    auto it = lookup_.find(key);
    if (it == lookup_.end()) return false;
    
    // 移动到列表前端
    items_.splice(items_.begin(), items_, it->second);
    value = it->second->second;
    return true;
}
```

### KV存储主类实现关键点

```cpp
// kv_store.cpp
bool KVStore::set(const std::string& key, const void* value, size_t size, long long ttl_ms) {
    void* data = allocator_->allocate(size);
    if (!data) return false;
    
    memcpy(data, value, size);
    
    Value val{data, size};
    
    std::lock_guard<std::mutex> lock(storage_mutex_);
    storage_[key] = val;
    lru_cache_->put(key, val);
    
    if (ttl_ms > 0) {
        auto expire_time = std::chrono::system_clock::now() + 
                          std::chrono::milliseconds(ttl_ms);
        ttl_manager_->set_ttl(key, expire_time);
    }
    
    return true;
}
```

## 测试示例

```cpp
// test/test_kv_store.cpp
#include "kv_store.h"
#include <iostream>
#include <thread>
#include <chrono>

int main() {
    KVStore store(1024 * 1024, 100); // 1MB内存，LRU容量100
    
    // 设置带TTL的键值
    std::string key = "temp_key";
    std::string value = "This will expire soon";
    store.set(key, value.data(), value.size(), 2000); // 2秒TTL
    
    // 立即获取应该存在
    KVStore::Value retrieved;
    if (store.get(key, retrieved)) {
        std::cout << "Got value: " 
                  << std::string((char*)retrieved.data, retrieved.size) 
                  << std::endl;
    }
    
    // 等待3秒后应该过期
    std::this_thread::sleep_for(std::chrono::seconds(3));
    store.cleanup(); // 清理过期键
    
    if (!store.get(key, retrieved)) {
        std::cout << "Key has expired as expected" << std::endl;
    }
    
    return 0;
}
```

## 扩展考虑

1. **持久化支持**：可以添加将内存数据保存到磁盘的功能
2. **并发优化**：使用更细粒度的锁或读写锁提高并发性能
3. **统计监控**：添加命中率、内存使用等统计信息
4. **多种淘汰策略**：除了LRU，可以支持LFU等其他策略
5. **内存压缩**：对于大值可以考虑压缩存储
