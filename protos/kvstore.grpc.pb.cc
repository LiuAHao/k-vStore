// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kvstore.proto

#include "kvstore.pb.h"
#include "kvstore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kvstore {

static const char* KvStore_method_names[] = {
  "/kvstore.KvStore/ClientCommand",
};

std::unique_ptr< KvStore::Stub> KvStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KvStore::Stub> stub(new KvStore::Stub(channel));
  return stub;
}

KvStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ClientCommand_(KvStore_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KvStore::Stub::ClientCommand(::grpc::ClientContext* context, const ::kvstore::CommandRequest& request, ::kvstore::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientCommand_, context, request, response);
}

void KvStore::Stub::experimental_async::ClientCommand(::grpc::ClientContext* context, const ::kvstore::CommandRequest* request, ::kvstore::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClientCommand_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommandResponse>* KvStore::Stub::AsyncClientCommandRaw(::grpc::ClientContext* context, const ::kvstore::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::CommandResponse>::Create(channel_.get(), cq, rpcmethod_ClientCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommandResponse>* KvStore::Stub::PrepareAsyncClientCommandRaw(::grpc::ClientContext* context, const ::kvstore::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvstore::CommandResponse>::Create(channel_.get(), cq, rpcmethod_ClientCommand_, context, request, false);
}

KvStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvStore::Service, ::kvstore::CommandRequest, ::kvstore::CommandResponse>(
          std::mem_fn(&KvStore::Service::ClientCommand), this)));
}

KvStore::Service::~Service() {
}

::grpc::Status KvStore::Service::ClientCommand(::grpc::ServerContext* context, const ::kvstore::CommandRequest* request, ::kvstore::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kvstore

